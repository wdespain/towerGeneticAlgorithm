{
  "name": "Tower Genetic Algorithm",
  "tagline": "Made for CS 5600, this project tries to build a tower using a genetic algorithm.",
  "body": "###Absract\r\nGenetic Algorithms can find things that humans may not have been able to design or think of. \r\n\r\nI wanted to see what would happen when I applied this to structures (like bridges and towers). This program takes randomly placed beams and sees how well they perform and can find stable structures.\r\n\r\n###Problem Description\r\nGiven a random input of beams, drop a shape on them and see how well they can hold it. The goal is to find a structure that can hold the shape without wobbling too much.\r\n\r\n###Method\r\nGenetic Algorithms take random input, test them, take the best, and the breed them to find the next generation. As it continues to do this, the scores should get better. My program follows this simple structure.\r\n\r\n1. Random Input\r\n\tMy program gives each beam a random placement, within a bound, and angle. This is the starting point for the algorithm. \r\n\r\n2. Test\r\n\tThe most important part of the testing phase in the fitness function. This fitness criteria for this program is simply the height of the shape.\r\n\r\n3. Breed\r\n\tThe program then gives each structure a weighted percentage based on it's fitness score and then randomly picks two structures to breed. I use two point crossover meaning that two points on the chromosome are chosen and mixed.\r\n\t\r\n4. Mutate\r\n\tMutations can also happen. If a mutation occurs the beam may: be given a new position or angle, or change length.\r\n\r\n5. Run Again\r\n\tThe program then goes back to step 2 and does it all over again.\r\n\r\n###Results\r\nWhile the towers did get a little taller, they do not look very tower like. The fitness function incentivized holding the shape as high as possible, it did not incentivize stability.\r\n\r\nEven though the best scores did not go up very much, the average and minimum score went up.\r\n\r\n###Conclusions\r\n\r\nThis program did not do what I was expecting. I was expecting to see something taller with more stability.\r\n\r\nThe height did not go up very much and the towers did not find stability, even sometimes with beams going off to the side and not contributing to the tower.\r\n\r\nThe ultimate problem was not starting out with something usable and not having a fitness function that incentivized stability.\r\n\r\n###Things to Try in the Future\r\n\r\nStarting with randomly placed beams was not the best way to start it off, it did not find structure from nothing. If I were to do this again, I would start off with sudo-random inputs that had some structure and to see if the algorithm would be able to improve upon it.\r\n\r\nI would also find a better fitness algorithm, just having the height as the fitness function was not enough. Computing in the movement in the beams and also adding points for connectivity would also be good things to try.\r\n\r\nIn addition, I would also change the breeding to take out the bottom 5% and not let them breed. In the beginning, towers with a score of zero would have no chance of breeding, but as the bottom score went up, even the worst scoring ones had a chance to breed.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}